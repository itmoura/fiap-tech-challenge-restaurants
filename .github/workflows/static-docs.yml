name: üåê Static HTML Documentation

on:
  workflow_dispatch:
    inputs:
      use_static:
        description: 'Use static HTML instead of MkDocs'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-static"
  cancel-in-progress: false

jobs:
  build-static:
    runs-on: ubuntu-latest
    if: github.event.inputs.use_static == 'true'
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üèóÔ∏è Create Static HTML Site
        run: |
          mkdir -p static-site
          
          # Create main HTML structure
          cat > static-site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="pt-BR">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Tech Challenge - Restaurant Management API</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      line-height: 1.6; color: #333; background: #f5f5f5;
                  }
                  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                  header { background: #2c3e50; color: white; padding: 2rem 0; margin-bottom: 2rem; }
                  .header-content { max-width: 1200px; margin: 0 auto; padding: 0 20px; }
                  h1 { font-size: 2.5rem; margin-bottom: 0.5rem; }
                  .subtitle { font-size: 1.2rem; opacity: 0.9; }
                  .nav { background: white; padding: 1rem 0; margin-bottom: 2rem; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .nav-content { max-width: 1200px; margin: 0 auto; padding: 0 20px; }
                  .nav ul { list-style: none; display: flex; flex-wrap: wrap; gap: 2rem; }
                  .nav a { text-decoration: none; color: #2c3e50; font-weight: 500; }
                  .nav a:hover { color: #3498db; }
                  .content { background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                  .badge { display: inline-block; padding: 0.25rem 0.5rem; background: #3498db; color: white; border-radius: 4px; font-size: 0.8rem; margin: 0.25rem; }
                  .feature { margin: 1rem 0; padding: 1rem; background: #ecf0f1; border-radius: 4px; }
                  .api-section { margin: 2rem 0; }
                  .endpoint { background: #f8f9fa; padding: 1rem; margin: 0.5rem 0; border-left: 4px solid #3498db; }
                  .method { display: inline-block; padding: 0.25rem 0.5rem; color: white; border-radius: 4px; font-weight: bold; margin-right: 0.5rem; }
                  .get { background: #27ae60; }
                  .post { background: #f39c12; }
                  .put { background: #e74c3c; }
                  .delete { background: #c0392b; }
                  footer { text-align: center; padding: 2rem; color: #7f8c8d; }
                  @media (max-width: 768px) {
                      .nav ul { flex-direction: column; gap: 1rem; }
                      h1 { font-size: 2rem; }
                      .container { padding: 10px; }
                  }
              </style>
          </head>
          <body>
              <header>
                  <div class="header-content">
                      <h1>üçΩÔ∏è Tech Challenge - Restaurant Management API</h1>
                      <p class="subtitle">Sistema de gerenciamento de restaurantes com Spring Boot + MongoDB</p>
                  </div>
              </header>

              <nav class="nav">
                  <div class="nav-content">
                      <ul>
                          <li><a href="#overview">Vis√£o Geral</a></li>
                          <li><a href="#installation">Instala√ß√£o</a></li>
                          <li><a href="#api">API Reference</a></li>
                          <li><a href="#architecture">Arquitetura</a></li>
                          <li><a href="https://github.com/itmoura/fiap-tech-challenge-restaurants" target="_blank">GitHub</a></li>
                      </ul>
                  </div>
              </nav>

              <div class="container">
                  <div class="content">
                      <section id="overview">
                          <h2>üéØ Vis√£o Geral</h2>
                          
                          <div style="margin: 1rem 0;">
                              <span class="badge">Java 21</span>
                              <span class="badge">Spring Boot 3.5.4</span>
                              <span class="badge">MongoDB 7.0</span>
                              <span class="badge">Docker</span>
                              <span class="badge">Clean Architecture</span>
                          </div>

                          <p>Sistema de gerenciamento de restaurantes desenvolvido com <strong>Spring Boot + MongoDB</strong>, focado em alta performance de leitura atrav√©s de estrutura de documentos aninhados com endpoints espec√≠ficos para gerenciamento transparente de menu e itens.</p>

                          <div class="feature">
                              <h3>‚ú® Principais Funcionalidades</h3>
                              <ul>
                                  <li>‚úÖ <strong>Gerenciamento de Restaurantes</strong>: CRUD completo com informa√ß√µes b√°sicas</li>
                                  <li>‚úÖ <strong>Kitchen Types</strong>: Gerenciamento de tipos de cozinha</li>
                                  <li>‚úÖ <strong>Menu Estruturado</strong>: Categorias e itens organizados hierarquicamente</li>
                                  <li>‚úÖ <strong>Endpoints Espec√≠ficos</strong>: Gerenciamento transparente de menu e itens</li>
                                  <li>‚úÖ <strong>Clean Architecture</strong>: Separa√ß√£o clara de responsabilidades</li>
                                  <li>‚úÖ <strong>MongoDB NoSQL</strong>: Performance otimizada para leitura</li>
                              </ul>
                          </div>
                      </section>

                      <section id="installation" class="api-section">
                          <h2>üîß Instala√ß√£o</h2>
                          
                          <h3>Pr√©-requisitos</h3>
                          <ul>
                              <li>Java 21+</li>
                              <li>MongoDB 6.0+</li>
                              <li>Docker (opcional)</li>
                              <li>Gradle 8.0+</li>
                          </ul>

                          <h3>Execu√ß√£o Local</h3>
                          <div class="endpoint">
                              <pre><code># 1. Clonar reposit√≥rio
git clone https://github.com/itmoura/fiap-tech-challenge-restaurants.git
cd fiap-tech-challenge-restaurants

# 2. Iniciar MongoDB
docker-compose up -d mongodb

# 3. Executar aplica√ß√£o
./gradlew bootRun

# 4. Acessar API
curl http://localhost:8080/api/restaurants</code></pre>
                          </div>

                          <h3>Docker</h3>
                          <div class="endpoint">
                              <pre><code># Executar com Docker Compose
docker-compose up -d

# Verificar containers
docker-compose ps</code></pre>
                          </div>
                      </section>

                      <section id="api" class="api-section">
                          <h2>üìö API Reference</h2>
                          
                          <h3>Kitchen Types</h3>
                          <div class="endpoint">
                              <span class="method get">GET</span>
                              <code>/api/kitchen-types</code> - Listar tipos de cozinha
                          </div>
                          <div class="endpoint">
                              <span class="method post">POST</span>
                              <code>/api/kitchen-types</code> - Criar tipo de cozinha
                          </div>

                          <h3>Restaurants</h3>
                          <div class="endpoint">
                              <span class="method get">GET</span>
                              <code>/api/restaurants</code> - Listar restaurantes
                          </div>
                          <div class="endpoint">
                              <span class="method get">GET</span>
                              <code>/api/restaurants/{id}</code> - Buscar restaurante por ID
                          </div>
                          <div class="endpoint">
                              <span class="method post">POST</span>
                              <code>/api/restaurants</code> - Criar restaurante
                          </div>
                          <div class="endpoint">
                              <span class="method put">PUT</span>
                              <code>/api/restaurants/{id}</code> - Atualizar restaurante
                          </div>

                          <h3>Menu Categories</h3>
                          <div class="endpoint">
                              <span class="method get">GET</span>
                              <code>/api/restaurants/{id}/menu/categories</code> - Listar categorias
                          </div>
                          <div class="endpoint">
                              <span class="method post">POST</span>
                              <code>/api/restaurants/{id}/menu/categories</code> - Criar categoria
                          </div>

                          <h3>Menu Items</h3>
                          <div class="endpoint">
                              <span class="method get">GET</span>
                              <code>/api/restaurants/{id}/menu/categories/{categoryId}/items</code> - Listar itens
                          </div>
                          <div class="endpoint">
                              <span class="method post">POST</span>
                              <code>/api/restaurants/{id}/menu/categories/{categoryId}/items</code> - Criar item
                          </div>
                      </section>

                      <section id="architecture" class="api-section">
                          <h2>üèóÔ∏è Arquitetura</h2>
                          
                          <div class="feature">
                              <h3>Clean Architecture</h3>
                              <p>O projeto segue os princ√≠pios da Clean Architecture com separa√ß√£o clara de responsabilidades:</p>
                              <ul>
                                  <li><strong>Controllers</strong>: Camada de apresenta√ß√£o (REST API)</li>
                                  <li><strong>Use Cases</strong>: Regras de neg√≥cio da aplica√ß√£o</li>
                                  <li><strong>Entities</strong>: Regras de neg√≥cio empresariais</li>
                                  <li><strong>Repositories</strong>: Acesso a dados</li>
                              </ul>
                          </div>

                          <div class="feature">
                              <h3>Modelagem MongoDB</h3>
                              <p>Estrutura otimizada para NoSQL com documentos aninhados:</p>
                              <ul>
                                  <li><strong>Restaurant</strong>: Documento principal com menu aninhado</li>
                                  <li><strong>Menu Categories</strong>: Array de categorias no documento</li>
                                  <li><strong>Menu Items</strong>: Array de itens dentro de cada categoria</li>
                                  <li><strong>Performance</strong>: Uma consulta retorna dados completos</li>
                              </ul>
                          </div>
                      </section>
                  </div>
              </div>

              <footer>
                  <p>&copy; 2024 √çtalo Moura - Licensed under MIT License</p>
                  <p>
                      <a href="https://github.com/itmoura/fiap-tech-challenge-restaurants" target="_blank">GitHub Repository</a> |
                      <a href="https://github.com/itmoura" target="_blank">Author Profile</a>
                  </p>
              </footer>
          </body>
          </html>
          EOF

      - name: üöÄ Setup Pages
        uses: actions/configure-pages@v4

      - name: üì§ Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./static-site

  deploy-static:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-static
    steps:
      - name: üöÄ Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: üì¢ Success Message
        run: |
          echo "üéâ Static documentation deployed successfully!"
          echo "üîó URL: ${{ steps.deployment.outputs.page_url }}"
