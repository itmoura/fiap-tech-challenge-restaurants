name: 📚 Deploy Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/deploy-docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs-material
          pip install mkdocs-with-pdf
          pip install mkdocs-minify-plugin
          pip install pymdown-extensions
          pip install mkdocs-mermaid2-plugin

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 📊 Generate API Documentation
        run: |
          # Create API documentation from OpenAPI spec if available
          if [ -f "src/main/resources/openapi.yml" ]; then
            echo "📋 OpenAPI spec found, generating additional docs..."
            # Add OpenAPI doc generation here if needed
          fi

      - name: 🏗️ Build documentation
        env:
          ENABLE_PDF_EXPORT: true
        run: |
          echo "🏗️ Building MkDocs site..."
          mkdocs build --verbose --clean
          
          # Verify build output
          if [ ! -d "site" ]; then
            echo "❌ Build failed - site directory not found"
            exit 1
          fi
          
          echo "✅ Build completed successfully"
          echo "📁 Site contents:"
          ls -la site/

      - name: 📄 Generate PDF Documentation
        env:
          ENABLE_PDF_EXPORT: true
        run: |
          echo "📄 Generating PDF documentation..."
          
          # Create PDF directory if it doesn't exist
          mkdir -p site/pdf
          
          # Generate PDF using mkdocs-with-pdf
          mkdocs build --config-file mkdocs.yml
          
          # Verify PDF was generated
          if [ -f "site/pdf/documentation.pdf" ]; then
            echo "✅ PDF generated successfully"
            ls -la site/pdf/
          else
            echo "⚠️ PDF generation failed, continuing without PDF"
          fi

      - name: 🔍 Validate HTML
        run: |
          echo "🔍 Validating generated HTML..."
          
          # Check for broken links (basic validation)
          find site -name "*.html" -exec grep -l "href.*#.*" {} \; | head -5
          
          # Check if main pages exist
          required_pages=("index.html" "installation/prerequisites/index.html" "api/overview/index.html")
          for page in "${required_pages[@]}"; do
            if [ -f "site/$page" ]; then
              echo "✅ Found: $page"
            else
              echo "❌ Missing: $page"
              exit 1
            fi
          done

      - name: 📊 Generate Site Statistics
        run: |
          echo "📊 Documentation Statistics:"
          echo "=========================="
          echo "📄 Total HTML files: $(find site -name "*.html" | wc -l)"
          echo "🖼️ Total images: $(find site -name "*.png" -o -name "*.jpg" -o -name "*.gif" -o -name "*.svg" | wc -l)"
          echo "📱 Total CSS files: $(find site -name "*.css" | wc -l)"
          echo "⚡ Total JS files: $(find site -name "*.js" | wc -l)"
          echo "📦 Total size: $(du -sh site | cut -f1)"
          echo "=========================="

      - name: 🚀 Setup Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: 📤 Upload artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

  # Deploy job (only on main branch)
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📢 Deployment Summary
        run: |
          echo "🎉 Documentation deployed successfully!"
          echo "🔗 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📅 Deployed at: $(date)"
          echo "🔄 Commit: ${{ github.sha }}"

  # Notification job
  notify:
    if: always() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build, deploy]
    steps:
      - name: 📢 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Documentation deployment successful!"
          echo "🔗 Live site: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo "📚 API docs are now available online"

      - name: ❌ Failure Notification
        if: needs.build.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Documentation deployment failed!"
          echo "🔍 Check the logs above for details"
          echo "🛠️ Common issues:"
          echo "   - Missing dependencies"
          echo "   - Invalid markdown syntax"
          echo "   - Broken links or references"

  # Quality checks (runs on PRs)
  quality-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          pip install mkdocs-material
          pip install pymdown-extensions

      - name: 🔍 Lint Markdown
        run: |
          echo "🔍 Checking markdown files..."
          
          # Check for common markdown issues
          find docs -name "*.md" -exec grep -l "]()" {} \; | while read file; do
            echo "⚠️ Empty link found in: $file"
          done
          
          # Check for missing alt text in images
          find docs -name "*.md" -exec grep -l "!\[\](" {} \; | while read file; do
            echo "⚠️ Image without alt text in: $file"
          done

      - name: 🏗️ Test Build
        run: |
          echo "🏗️ Testing documentation build..."
          mkdocs build --strict
          echo "✅ Build test passed"

      - name: 📊 PR Summary
        run: |
          echo "📊 Pull Request Documentation Check"
          echo "=================================="
          echo "✅ Markdown syntax: Valid"
          echo "✅ Build test: Passed"
          echo "📄 Modified files:"
          git diff --name-only origin/main...HEAD | grep -E "\.(md|yml)$" || echo "No documentation files changed"
