name: 📚 Documentation Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs-deploy.yml'
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'README.md'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force complete rebuild'
        required: false
        default: false
        type: boolean
  # Also trigger on workflow file changes
  schedule:
    - cron: '0 6 * * 1'  # Weekly rebuild on Mondays

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # JOB: Documentation Quality Check
  # ============================================================================
  docs-quality:
    name: 🔍 Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Documentation Tools
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Lint Markdown Files
        run: |
          echo "🔍 Checking markdown syntax and style..."
          
          # Check for common markdown issues
          echo "📝 Checking for empty links..."
          if find docs -name "*.md" -exec grep -Hn "]()" {} \; | head -5; then
            echo "⚠️ Found some empty links (shown above)"
          else
            echo "✅ No empty links found"
          fi
          
          echo "🖼️ Checking for images without alt text..."
          if find docs -name "*.md" -exec grep -Hn "!\[\](" {} \; | head -5; then
            echo "⚠️ Found images without alt text (shown above)"
          else
            echo "✅ All images have alt text"
          fi
          
          echo "🔗 Checking for potential broken internal links..."
          # Basic check for .md links
          find docs -name "*.md" -exec grep -Hn "\[.*\](.*\.md)" {} \; | head -5 | while read line; do
            echo "ℹ️ Internal link found: $line"
          done || echo "✅ No internal markdown links found"

      - name: 📊 Documentation Statistics
        run: |
          echo "📊 Documentation Statistics"
          echo "=========================="
          echo "📄 Total markdown files: $(find docs -name "*.md" | wc -l)"
          echo "🖼️ Total images: $(find docs -name "*.png" -o -name "*.jpg" -o -name "*.gif" -o -name "*.svg" | wc -l)"
          echo "📝 Total lines: $(find docs -name "*.md" -exec wc -l {} + | tail -1 | awk '{print $1}')"
          echo "📦 Documentation size: $(du -sh docs | cut -f1)"
          echo "=========================="

  # ============================================================================
  # JOB: Build Documentation
  # ============================================================================
  build-docs:
    name: 🏗️ Build Documentation
    runs-on: ubuntu-latest
    needs: docs-quality
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing Python dependencies..."
          pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "📦 Installing additional MkDocs plugins..."
          pip install mkdocs-material
          pip install mkdocs-with-pdf
          pip install mkdocs-minify-plugin
          pip install pymdown-extensions
          pip install mkdocs-mermaid2-plugin
          pip install mkdocs-git-revision-date-localized-plugin
          pip install mkdocs-awesome-pages-plugin

      - name: 🔧 Configure Git for MkDocs
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: 📊 Generate API Documentation
        run: |
          echo "📊 Generating API documentation from source code..."
          
          # Create API docs directory if it doesn't exist
          mkdir -p docs/api/generated
          
          # Generate OpenAPI documentation if spec exists
          if [ -f "src/main/resources/static/openapi.yml" ] || [ -f "src/main/resources/openapi.yml" ]; then
            echo "📋 OpenAPI specification found, generating API docs..."
            # You can add OpenAPI doc generation here
            echo "✅ API documentation generated"
          else
            echo "ℹ️ No OpenAPI specification found, skipping API doc generation"
          fi
          
          # Generate endpoint documentation from controllers
          echo "🔍 Scanning for REST endpoints..."
          find src -name "*.java" -exec grep -l "@RestController\|@Controller" {} \; | while read controller; do
            echo "📝 Found controller: $(basename "$controller")"
          done

      - name: 🏗️ Build MkDocs Site
        env:
          ENABLE_PDF_EXPORT: ${{ github.ref == 'refs/heads/main' }}
        run: |
          echo "🏗️ Building MkDocs documentation site..."
          
          # Build with verbose output for debugging
          mkdocs build --verbose --clean --strict
          
          # Verify build output
          if [ ! -d "site" ]; then
            echo "❌ Build failed - site directory not found"
            exit 1
          fi
          
          echo "✅ Documentation build completed successfully"
          echo "📁 Generated site structure:"
          find site -type f -name "*.html" | head -10

      - name: 📄 Generate PDF Documentation
        if: github.ref == 'refs/heads/main'
        run: |
          echo "📄 Generating PDF documentation..."
          
          # Create PDF output directory
          mkdir -p site/pdf
          
          # Generate PDF using weasyprint or similar
          # Note: mkdocs-with-pdf should handle this automatically
          if [ -f "site/pdf/document.pdf" ]; then
            echo "✅ PDF documentation generated successfully"
            ls -la site/pdf/
          else
            echo "⚠️ PDF generation may have failed, but continuing..."
          fi

      - name: 🔍 Validate Generated Site
        run: |
          echo "🔍 Validating generated documentation site..."
          
          # Check if site directory exists
          if [ ! -d "site" ]; then
            echo "❌ Site directory not found!"
            exit 1
          fi
          
          # Check for main index page
          if [ -f "site/index.html" ]; then
            echo "✅ Found main index page"
          else
            echo "❌ Missing main index page"
            exit 1
          fi
          
          # Check for other important pages (non-blocking)
          optional_pages=(
            "installation/prerequisites/index.html"
            "api/overview/index.html"
            "architecture/overview/index.html"
          )
          
          for page in "${optional_pages[@]}"; do
            if [ -f "site/$page" ]; then
              echo "✅ Found optional page: $page"
            else
              echo "ℹ️ Optional page not found: $page"
            fi
          done
          
          # Basic link validation (non-blocking)
          echo "🔗 Checking for obvious issues..."
          broken_links=$(find site -name "*.html" -exec grep -l "href.*404" {} \; | wc -l)
          if [ "$broken_links" -gt 0 ]; then
            echo "⚠️ Found $broken_links files with potential broken links"
          else
            echo "✅ No obvious broken links found"
          fi

      - name: 📊 Generate Site Metrics
        run: |
          echo "📊 Documentation Site Metrics"
          echo "============================="
          echo "📄 HTML pages: $(find site -name "*.html" | wc -l)"
          echo "🖼️ Images: $(find site -name "*.png" -o -name "*.jpg" -o -name "*.gif" -o -name "*.svg" | wc -l)"
          echo "🎨 CSS files: $(find site -name "*.css" | wc -l)"
          echo "⚡ JavaScript files: $(find site -name "*.js" | wc -l)"
          echo "📦 Total site size: $(du -sh site | cut -f1)"
          echo "🔍 Search index: $([ -f site/search/search_index.json ] && echo 'Generated' || echo 'Missing')"
          echo "============================="

      - name: 🚀 Setup GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: 📤 Upload Documentation Artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: 📤 Upload Build Artifacts (for PR review)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: documentation-preview
          path: ./site
          retention-days: 7

  # ============================================================================
  # JOB: Deploy to GitHub Pages (Main branch only)
  # ============================================================================
  deploy-docs:
    name: 🚀 Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📢 Deployment Success
        run: |
          echo "🎉 Documentation deployed successfully!"
          echo "🔗 Live URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📅 Deployed at: $(date)"
          echo "🔄 Commit: ${{ github.sha }}"

  # ============================================================================
  # JOB: Post-Deployment Validation
  # ============================================================================
  validate-deployment:
    name: ✅ Validate Deployment
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: deploy-docs
    
    steps:
      - name: 🔍 Health Check
        run: |
          echo "🔍 Performing post-deployment health check..."
          
          SITE_URL="${{ needs.deploy-docs.outputs.page_url }}"
          
          # Wait a moment for deployment to propagate
          sleep 30
          
          # Check if site is accessible
          if curl -f -s "$SITE_URL" > /dev/null; then
            echo "✅ Site is accessible at $SITE_URL"
          else
            echo "❌ Site is not accessible at $SITE_URL"
            exit 1
          fi
          
          # Check specific pages
          pages_to_check=("" "installation/prerequisites/" "api/overview/")
          for page in "${pages_to_check[@]}"; do
            if curl -f -s "${SITE_URL}${page}" > /dev/null; then
              echo "✅ Page accessible: ${page:-'home'}"
            else
              echo "⚠️ Page may not be accessible: ${page:-'home'}"
            fi
          done

  # ============================================================================
  # JOB: Notification & Summary
  # ============================================================================
  notify:
    name: 📢 Notification
    if: always()
    runs-on: ubuntu-latest
    needs: [docs-quality, build-docs, deploy-docs, validate-deployment]
    
    steps:
      - name: 📋 Generate Deployment Summary
        run: |
          echo "# 📚 Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Quality Check | ${{ needs.docs-quality.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build Docs | ${{ needs.build-docs.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "| 🚀 Deploy | ${{ needs.deploy-docs.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| ✅ Validation | ${{ needs.validate-deployment.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ needs.deploy-docs.result }}" = "success" ]; then
            echo "- **Live URL:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🎉 Success Notification
        if: needs.deploy-docs.result == 'success' && github.ref == 'refs/heads/main'
        run: |
          echo "🎉 Documentation deployment completed successfully!"
          echo "🔗 Your documentation is now live at:"
          echo "   https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          echo ""
          echo "📚 Available sections:"
          echo "   • Installation Guide"
          echo "   • API Reference"
          echo "   • Architecture Documentation"
          echo "   • About & License"

      - name: ❌ Failure Notification
        if: needs.build-docs.result == 'failure' || needs.deploy-docs.result == 'failure'
        run: |
          echo "❌ Documentation deployment failed!"
          echo ""
          echo "🔍 Possible causes:"
          echo "   • Invalid markdown syntax"
          echo "   • Missing dependencies"
          echo "   • Broken links or references"
          echo "   • MkDocs configuration errors"
          echo ""
          echo "🛠️ Check the job logs above for specific error details."
          exit 1

      - name: 📝 PR Preview Notification
        if: github.event_name == 'pull_request' && needs.build-docs.result == 'success'
        run: |
          echo "📝 Documentation preview built successfully for PR!"
          echo "📦 Preview artifact uploaded - download to review changes locally"
          echo "🔍 Changes will be deployed to GitHub Pages when merged to main"
